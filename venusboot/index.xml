<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Venus Boot 介绍 on Venus中间件</title>
    <link>http://venusplus.cn/venusboot/</link>
    <description>Recent content in Venus Boot 介绍 on Venus中间件</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>2017 Venus Plus出品</copyright>
    <lastBuildDate>Thu, 27 Apr 2017 10:09:20 +0000</lastBuildDate>
    
	<atom:link href="http://venusplus.cn/venusboot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Venus Boot 介绍</title>
      <link>http://venusplus.cn/venusboot/quickstart/</link>
      <pubDate>Thu, 27 Apr 2017 10:09:20 +0000</pubDate>
      
      <guid>http://venusplus.cn/venusboot/quickstart/</guid>
      <description>摘要: 本文主要从网关的需求，以及Spring Cloud Zuul的线程模型和源码瓶颈分析结合，目前最近一段时间自研网关中间件纳管Spring Cloud的经验汇总整理。
一.自研网关纳管Spring Cloud的原因 1.1 为什么要自研网关 1.网关配置实时生效，配置灰度，回滚等 2.网关的性能，特别是防刷，限流，WAF等 3.动态Filter ，目前Zuul可以做到动态Filter，Filter配置下发，实时动态Filter 4.对网关的监控，告警，流量调拨，网关集群。 5.流程审计，增加Dsboard便捷的操作。
1.2 回顾Web容器线程模型 Servlet只是基于Java技术的web组件，该组件由容器托管，用于生成动态内容。Servlet容器是web Server或application server 的一部分，供基于Request/Response发送模型的网络服务，解码基于MIME的请求，并格式化基于MIME的响应。Servlet容器包含并管理Servlet生命周期。典型的Servlet容器有Tomcat、Jetty。
如上图所示，Tomcat基于NIO的多线程模型，如下图所示，其基于典型的Acceptor/Reactor线程模型，在Tomcat的线程模型中，Worker线程用来处理Request。当容器收到一个Request后，调度线程从Worker线程池中选出一个Worker线程，将请求传递给该线程，然后由该线程来执行Servlet的service()方法。且该worker线程只能同时处理一个Request请求，如果过程中发生了阻塞，那么该线程就会被阻塞，而不能去处理其他任务。 Servlet默认情况下一个单例多线程。
回到zuul，zuul逻辑的入口是ZuulServlet.service(ServletRequest servletRequest, ServletResponse servletResponse)，ZuulServlet本质就是一个Servlet。
RequestContext提供了执行filter Pipeline所需要的Context，因为Servlet是单例多线程，这就要求RequestContext即要线程安全又要Request安全。context使用ThreadLocal保存，这样每个worker线程都有一个与其绑定的RequestContext，因为worker仅能同时处理一个Request，这就保证了Request Context 即是线程安全的，又是Request安全的。所谓Request 安全，即该Request的Context不会与其他同时处理Request冲突。 RequestContext继承了ConcurrentHashMap。
三个核心的方法preRoute(),route(), postRoute()，zuul对request处理逻辑都在这三个方法里，ZuulServlet交给ZuulRunner去执行。由于ZuulServlet是单例，因此ZuulRunner也仅有一个实例。
 因此综上所述，Spring Cloud Zuul的Qps在1000-2000Qps之间是有原因的，网关作为如此重要的组件，基于如上所述的需求，觉得自研网关中间件纳管Spring Cloud很有必要。
 二.自研网关纳管Spring Cloud 2.1 网关整合Spring Cloud服务治理体系 2.1.1 整合服务治理体系思路  如果服务注册中心使用的是Eureka，可以不引入Spring Cloud Eureka相关的依赖，直接通过定时任务发起Eureka REST请求，网关自身维护一个缓存列表，自己写LB，找到服务列表转发。   优点：不需要引入Spring Cloud，对网关Server进行瘦身，洁癖讨厌各种引入无用的jar； 缺点: 注册中心使用Eureka，可以通过Eureka REST接口获取服务注册列表，但是换成ZK，Consul，或者Etcd，直接歇菜。
  通过集成Spring Cloud Common中高度抽象的DiscoveryClient。 &amp;gt; 优点: 通过高度抽象的DiscoveryClient，无需关心实现细节和定时任务去刷新注册列表。 &amp;gt; 缺点：换注册中心，需要相应的更换对应配置和依赖，一堆有些无关紧要的jar，需要自己对其瘦身。  2.</description>
    </item>
    
  </channel>
</rss>